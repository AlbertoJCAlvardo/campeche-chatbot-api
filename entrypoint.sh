#!/bin/bash

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ Iniciando aplicaci√≥n Django...${NC}"

# Funci√≥n para verificar si ChromaDB est√° vac√≠o
check_chromadb_empty() {
    if [ ! -f "/app/data/chromadb/chroma-collections.parquet" ] || [ ! -s "/app/data/chromadb/chroma-collections.parquet" ]; then
        return 0  # Est√° vac√≠o
    else
        return 1  # No est√° vac√≠o
    fi
}

# Ejecutar migraciones
echo -e "${YELLOW}üì¶ Ejecutando migraciones de Django...${NC}"
python manage.py makemigrations --noinput
python manage.py migrate --noinput

# Recolectar archivos est√°ticos
echo -e "${YELLOW}üìÇ Recolectando archivos est√°ticos...${NC}"
python manage.py collectstatic --noinput

# Verificar y poblar ChromaDB si est√° vac√≠o
echo -e "${YELLOW}üîç Verificando estado de ChromaDB...${NC}"
if check_chromadb_empty; then
    echo -e "${YELLOW}üìä ChromaDB est√° vac√≠o. Poblando base de datos vectorial...${NC}"
    cd /app/scripts
    python poblar_vectordb.py
    cd /app
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Base de datos vectorial poblada exitosamente${NC}"
    else
        echo -e "${RED}‚ùå Error poblando la base de datos vectorial${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ ChromaDB ya contiene datos${NC}"
fi

# Verificar variables de entorno cr√≠ticas
if [ -z "$GEMINI_API_KEY" ]; then
    echo -e "${RED}‚ö†Ô∏è  WARNING: GEMINI_API_KEY no est√° configurada${NC}"
fi

if [ -z "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
    echo -e "${RED}‚ö†Ô∏è  WARNING: GOOGLE_APPLICATION_CREDENTIALS no est√° configurada${NC}"
fi

# Iniciar la aplicaci√≥n con Gunicorn
echo -e "${GREEN}üåê Iniciando servidor web...${NC}"
exec gunicorn webhook_dialogflow.wsgi:application \
    --bind 0.0.0.0:8000 \
    --workers 2 \
    --timeout 120 \
    --log-level info \
    --access-logfile - \
    --error-logfile -